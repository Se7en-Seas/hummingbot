# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import grpc.experimental

from hummingbot.connector.gateway.clob_spot.data_sources.penumbra.generated.penumbra.core.component.shielded_pool.v1 import (
    shielded_pool_pb2 as penumbra_dot_core_dot_component_dot_shielded__pool_dot_v1_dot_shielded__pool__pb2,
)


class QueryServiceStub(object):
    """Query operations for the shielded pool component.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AssetMetadataById = channel.unary_unary(
                '/penumbra.core.component.shielded_pool.v1.QueryService/AssetMetadataById',
                request_serializer=penumbra_dot_core_dot_component_dot_shielded__pool_dot_v1_dot_shielded__pool__pb2.AssetMetadataByIdRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_shielded__pool_dot_v1_dot_shielded__pool__pb2.AssetMetadataByIdResponse.FromString,
                )
        self.AssetMetadataByIds = channel.unary_stream(
                '/penumbra.core.component.shielded_pool.v1.QueryService/AssetMetadataByIds',
                request_serializer=penumbra_dot_core_dot_component_dot_shielded__pool_dot_v1_dot_shielded__pool__pb2.AssetMetadataByIdsRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_shielded__pool_dot_v1_dot_shielded__pool__pb2.AssetMetadataByIdsResponse.FromString,
                )


class QueryServiceServicer(object):
    """Query operations for the shielded pool component.
    """

    def AssetMetadataById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssetMetadataByIds(self, request, context):
        """Requests a stream of asset metadata, given an array of asset IDs. Responses
        may be streamed in a different order from that of the asset IDs in the
        request, and asset IDs unknown to the node will not receive any response
        objects -- that is, the number of responses may be smaller than the length
        of the asset IDs array.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AssetMetadataById': grpc.unary_unary_rpc_method_handler(
                    servicer.AssetMetadataById,
                    request_deserializer=penumbra_dot_core_dot_component_dot_shielded__pool_dot_v1_dot_shielded__pool__pb2.AssetMetadataByIdRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_shielded__pool_dot_v1_dot_shielded__pool__pb2.AssetMetadataByIdResponse.SerializeToString,
            ),
            'AssetMetadataByIds': grpc.unary_stream_rpc_method_handler(
                    servicer.AssetMetadataByIds,
                    request_deserializer=penumbra_dot_core_dot_component_dot_shielded__pool_dot_v1_dot_shielded__pool__pb2.AssetMetadataByIdsRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_shielded__pool_dot_v1_dot_shielded__pool__pb2.AssetMetadataByIdsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'penumbra.core.component.shielded_pool.v1.QueryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QueryService(object):
    """Query operations for the shielded pool component.
    """

    @staticmethod
    def AssetMetadataById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.core.component.shielded_pool.v1.QueryService/AssetMetadataById',
            penumbra_dot_core_dot_component_dot_shielded__pool_dot_v1_dot_shielded__pool__pb2.AssetMetadataByIdRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_shielded__pool_dot_v1_dot_shielded__pool__pb2.AssetMetadataByIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AssetMetadataByIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.core.component.shielded_pool.v1.QueryService/AssetMetadataByIds',
            penumbra_dot_core_dot_component_dot_shielded__pool_dot_v1_dot_shielded__pool__pb2.AssetMetadataByIdsRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_shielded__pool_dot_v1_dot_shielded__pool__pb2.AssetMetadataByIdsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
