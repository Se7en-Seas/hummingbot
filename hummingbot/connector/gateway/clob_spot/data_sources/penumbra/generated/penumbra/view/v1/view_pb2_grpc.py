# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import grpc.experimental

from hummingbot.connector.gateway.clob_spot.data_sources.penumbra.generated.penumbra.view.v1 import (
    view_pb2 as penumbra_dot_view_dot_v1_dot_view__pb2,
)


class ViewServiceStub(object):
    """The view RPC is used by a view client, who wants to do some
    transaction-related actions, to request data from a view service, which is
    responsible for synchronizing and scanning the public chain state with one or
    more full viewing keys.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Status = channel.unary_unary(
                '/penumbra.view.v1.ViewService/Status',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.StatusRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.StatusResponse.FromString,
                )
        self.StatusStream = channel.unary_stream(
                '/penumbra.view.v1.ViewService/StatusStream',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.StatusStreamRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.StatusStreamResponse.FromString,
                )
        self.Notes = channel.unary_stream(
                '/penumbra.view.v1.ViewService/Notes',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.NotesRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.NotesResponse.FromString,
                )
        self.NotesForVoting = channel.unary_stream(
                '/penumbra.view.v1.ViewService/NotesForVoting',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.NotesForVotingRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.NotesForVotingResponse.FromString,
                )
        self.Assets = channel.unary_stream(
                '/penumbra.view.v1.ViewService/Assets',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.AssetsRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.AssetsResponse.FromString,
                )
        self.AssetMetadataById = channel.unary_unary(
                '/penumbra.view.v1.ViewService/AssetMetadataById',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.AssetMetadataByIdRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.AssetMetadataByIdResponse.FromString,
                )
        self.AppParameters = channel.unary_unary(
                '/penumbra.view.v1.ViewService/AppParameters',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.AppParametersRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.AppParametersResponse.FromString,
                )
        self.GasPrices = channel.unary_unary(
                '/penumbra.view.v1.ViewService/GasPrices',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.GasPricesRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.GasPricesResponse.FromString,
                )
        self.FMDParameters = channel.unary_unary(
                '/penumbra.view.v1.ViewService/FMDParameters',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.FMDParametersRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.FMDParametersResponse.FromString,
                )
        self.AddressByIndex = channel.unary_unary(
                '/penumbra.view.v1.ViewService/AddressByIndex',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.AddressByIndexRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.AddressByIndexResponse.FromString,
                )
        self.WalletId = channel.unary_unary(
                '/penumbra.view.v1.ViewService/WalletId',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.WalletIdRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.WalletIdResponse.FromString,
                )
        self.IndexByAddress = channel.unary_unary(
                '/penumbra.view.v1.ViewService/IndexByAddress',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.IndexByAddressRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.IndexByAddressResponse.FromString,
                )
        self.EphemeralAddress = channel.unary_unary(
                '/penumbra.view.v1.ViewService/EphemeralAddress',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.EphemeralAddressRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.EphemeralAddressResponse.FromString,
                )
        self.Balances = channel.unary_stream(
                '/penumbra.view.v1.ViewService/Balances',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.BalancesRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.BalancesResponse.FromString,
                )
        self.NoteByCommitment = channel.unary_unary(
                '/penumbra.view.v1.ViewService/NoteByCommitment',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.NoteByCommitmentRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.NoteByCommitmentResponse.FromString,
                )
        self.SwapByCommitment = channel.unary_unary(
                '/penumbra.view.v1.ViewService/SwapByCommitment',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.SwapByCommitmentRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.SwapByCommitmentResponse.FromString,
                )
        self.UnclaimedSwaps = channel.unary_stream(
                '/penumbra.view.v1.ViewService/UnclaimedSwaps',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.UnclaimedSwapsRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.UnclaimedSwapsResponse.FromString,
                )
        self.NullifierStatus = channel.unary_unary(
                '/penumbra.view.v1.ViewService/NullifierStatus',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.NullifierStatusRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.NullifierStatusResponse.FromString,
                )
        self.TransactionInfoByHash = channel.unary_unary(
                '/penumbra.view.v1.ViewService/TransactionInfoByHash',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.TransactionInfoByHashRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.TransactionInfoByHashResponse.FromString,
                )
        self.TransactionInfo = channel.unary_stream(
                '/penumbra.view.v1.ViewService/TransactionInfo',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.TransactionInfoRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.TransactionInfoResponse.FromString,
                )
        self.OwnedPositionIds = channel.unary_stream(
                '/penumbra.view.v1.ViewService/OwnedPositionIds',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.OwnedPositionIdsRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.OwnedPositionIdsResponse.FromString,
                )
        self.TransactionPlanner = channel.unary_unary(
                '/penumbra.view.v1.ViewService/TransactionPlanner',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.TransactionPlannerRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.TransactionPlannerResponse.FromString,
                )
        self.Witness = channel.unary_unary(
                '/penumbra.view.v1.ViewService/Witness',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.WitnessRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.WitnessResponse.FromString,
                )
        self.WitnessAndBuild = channel.unary_stream(
                '/penumbra.view.v1.ViewService/WitnessAndBuild',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.WitnessAndBuildRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.WitnessAndBuildResponse.FromString,
                )
        self.AuthorizeAndBuild = channel.unary_stream(
                '/penumbra.view.v1.ViewService/AuthorizeAndBuild',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.AuthorizeAndBuildRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.AuthorizeAndBuildResponse.FromString,
                )
        self.BroadcastTransaction = channel.unary_stream(
                '/penumbra.view.v1.ViewService/BroadcastTransaction',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.BroadcastTransactionRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.BroadcastTransactionResponse.FromString,
                )
        self.DelegationsByAddressIndex = channel.unary_stream(
                '/penumbra.view.v1.ViewService/DelegationsByAddressIndex',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.DelegationsByAddressIndexRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.DelegationsByAddressIndexResponse.FromString,
                )
        self.UnbondingTokensByAddressIndex = channel.unary_stream(
                '/penumbra.view.v1.ViewService/UnbondingTokensByAddressIndex',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.UnbondingTokensByAddressIndexRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.UnbondingTokensByAddressIndexResponse.FromString,
                )
        self.Auctions = channel.unary_stream(
                '/penumbra.view.v1.ViewService/Auctions',
                request_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.AuctionsRequest.SerializeToString,
                response_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.AuctionsResponse.FromString,
                )


class ViewServiceServicer(object):
    """The view RPC is used by a view client, who wants to do some
    transaction-related actions, to request data from a view service, which is
    responsible for synchronizing and scanning the public chain state with one or
    more full viewing keys.
    """

    def Status(self, request, context):
        """Get current status of chain sync
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StatusStream(self, request, context):
        """Stream sync status updates until the view service has caught up with the chain.
        Returns a stream of `StatusStreamResponse`s.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Notes(self, request, context):
        """Queries for notes that have been accepted by the chain.
        Returns a stream of `NotesResponse`s.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotesForVoting(self, request, context):
        """Returns a stream of `NotesForVotingResponse`s.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Assets(self, request, context):
        """Queries for metadata about known assets.
        Returns a stream of `AssetsResponse`s.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssetMetadataById(self, request, context):
        """Query for metadata about a specific asset, by asset ID.

        This is the same as the method on the shielded pool's `QueryService`, but exposing it
        here allows a view server to provide more specific or opinionated asset metadata -- like
        using an asset registry to provide tickers, symbols, etc.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppParameters(self, request, context):
        """Query for the current app parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GasPrices(self, request, context):
        """Query for the current gas prices.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FMDParameters(self, request, context):
        """Query for the current FMD parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddressByIndex(self, request, context):
        """Query for an address given an address index
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WalletId(self, request, context):
        """Query for wallet id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IndexByAddress(self, request, context):
        """Query for an address given an address index
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EphemeralAddress(self, request, context):
        """Query for an ephemeral address
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Balances(self, request, context):
        """Query for balance of a given address.
        Returns a stream of `BalancesResponses`.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NoteByCommitment(self, request, context):
        """Query for a note by its note commitment, optionally waiting until the note is detected.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SwapByCommitment(self, request, context):
        """Query for a swap by its swap commitment, optionally waiting until the swap is detected.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnclaimedSwaps(self, request, context):
        """Query for all unclaimed swaps.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NullifierStatus(self, request, context):
        """Query for whether a nullifier has been spent, optionally waiting until it is spent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransactionInfoByHash(self, request, context):
        """Query for a given transaction by its hash.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransactionInfo(self, request, context):
        """Query for the full transactions in the given range of blocks.
        Returns a stream of `TransactionInfoResponse`s.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OwnedPositionIds(self, request, context):
        """Query for owned position IDs for the given trading pair and in the given position state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransactionPlanner(self, request, context):
        """Translates a high-level intent ("send X funds to Y address") into a complete transaction plan.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Witness(self, request, context):
        """Returns authentication data for the given transaction plan.

        This method takes a complete transaction plan, so that the client can get a
        consistent set of authentication paths to a common root for the entire
        transaction.  (Otherwise, if a client made multiple requests, the wallet
        service could have advanced the state commitment tree  between queries).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WitnessAndBuild(self, request, context):
        """Like `Witness`, but immediately uses the witness data to build (prove) the transaction.

        This method is useful for clients that can't easily do proving themselves, either because
        they're not written in Rust and can't easily import the proving code, or because they don't
        have access to proving keys, or some other reason.

        This method streams status updates to the caller before finally returning the transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthorizeAndBuild(self, request, context):
        """Authorize a transaction plan and build the transaction.

        This method is only supported on view servers that have access to a custody
        service.  Otherwise, it will fail.

        Penumbra's transaction authorization mechanism is designed so transactions
        can be signed and built (proved) concurrently. This allows implementations
        to, e.g., start proving optimistically while presenting the user with an
        approval dialog.

        This method streams status updates to the caller before finally returning the transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BroadcastTransaction(self, request, context):
        """Broadcast a transaction to the network, optionally waiting for full confirmation.

        This method streams status updates to the caller before finally returning confirmation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelegationsByAddressIndex(self, request, context):
        """Get delegation tokens for a given address index. Each delegation token will
        be represented by a `ValueView` with the given address index's balance of
        that token. Each `ValueView`'s `extended_metadata` field will contain the
        `ValidatorInfo` of the delegated validator.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnbondingTokensByAddressIndex(self, request, context):
        """Get unbonding tokens for the given address index, optionally filtered by
        whether the tokens are currently claimable.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Auctions(self, request, context):
        """Gets the auctions controlled by the user's wallet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ViewServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.StatusRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.StatusResponse.SerializeToString,
            ),
            'StatusStream': grpc.unary_stream_rpc_method_handler(
                    servicer.StatusStream,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.StatusStreamRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.StatusStreamResponse.SerializeToString,
            ),
            'Notes': grpc.unary_stream_rpc_method_handler(
                    servicer.Notes,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.NotesRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.NotesResponse.SerializeToString,
            ),
            'NotesForVoting': grpc.unary_stream_rpc_method_handler(
                    servicer.NotesForVoting,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.NotesForVotingRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.NotesForVotingResponse.SerializeToString,
            ),
            'Assets': grpc.unary_stream_rpc_method_handler(
                    servicer.Assets,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.AssetsRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.AssetsResponse.SerializeToString,
            ),
            'AssetMetadataById': grpc.unary_unary_rpc_method_handler(
                    servicer.AssetMetadataById,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.AssetMetadataByIdRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.AssetMetadataByIdResponse.SerializeToString,
            ),
            'AppParameters': grpc.unary_unary_rpc_method_handler(
                    servicer.AppParameters,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.AppParametersRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.AppParametersResponse.SerializeToString,
            ),
            'GasPrices': grpc.unary_unary_rpc_method_handler(
                    servicer.GasPrices,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.GasPricesRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.GasPricesResponse.SerializeToString,
            ),
            'FMDParameters': grpc.unary_unary_rpc_method_handler(
                    servicer.FMDParameters,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.FMDParametersRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.FMDParametersResponse.SerializeToString,
            ),
            'AddressByIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.AddressByIndex,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.AddressByIndexRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.AddressByIndexResponse.SerializeToString,
            ),
            'WalletId': grpc.unary_unary_rpc_method_handler(
                    servicer.WalletId,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.WalletIdRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.WalletIdResponse.SerializeToString,
            ),
            'IndexByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.IndexByAddress,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.IndexByAddressRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.IndexByAddressResponse.SerializeToString,
            ),
            'EphemeralAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.EphemeralAddress,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.EphemeralAddressRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.EphemeralAddressResponse.SerializeToString,
            ),
            'Balances': grpc.unary_stream_rpc_method_handler(
                    servicer.Balances,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.BalancesRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.BalancesResponse.SerializeToString,
            ),
            'NoteByCommitment': grpc.unary_unary_rpc_method_handler(
                    servicer.NoteByCommitment,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.NoteByCommitmentRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.NoteByCommitmentResponse.SerializeToString,
            ),
            'SwapByCommitment': grpc.unary_unary_rpc_method_handler(
                    servicer.SwapByCommitment,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.SwapByCommitmentRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.SwapByCommitmentResponse.SerializeToString,
            ),
            'UnclaimedSwaps': grpc.unary_stream_rpc_method_handler(
                    servicer.UnclaimedSwaps,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.UnclaimedSwapsRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.UnclaimedSwapsResponse.SerializeToString,
            ),
            'NullifierStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.NullifierStatus,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.NullifierStatusRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.NullifierStatusResponse.SerializeToString,
            ),
            'TransactionInfoByHash': grpc.unary_unary_rpc_method_handler(
                    servicer.TransactionInfoByHash,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.TransactionInfoByHashRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.TransactionInfoByHashResponse.SerializeToString,
            ),
            'TransactionInfo': grpc.unary_stream_rpc_method_handler(
                    servicer.TransactionInfo,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.TransactionInfoRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.TransactionInfoResponse.SerializeToString,
            ),
            'OwnedPositionIds': grpc.unary_stream_rpc_method_handler(
                    servicer.OwnedPositionIds,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.OwnedPositionIdsRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.OwnedPositionIdsResponse.SerializeToString,
            ),
            'TransactionPlanner': grpc.unary_unary_rpc_method_handler(
                    servicer.TransactionPlanner,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.TransactionPlannerRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.TransactionPlannerResponse.SerializeToString,
            ),
            'Witness': grpc.unary_unary_rpc_method_handler(
                    servicer.Witness,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.WitnessRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.WitnessResponse.SerializeToString,
            ),
            'WitnessAndBuild': grpc.unary_stream_rpc_method_handler(
                    servicer.WitnessAndBuild,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.WitnessAndBuildRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.WitnessAndBuildResponse.SerializeToString,
            ),
            'AuthorizeAndBuild': grpc.unary_stream_rpc_method_handler(
                    servicer.AuthorizeAndBuild,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.AuthorizeAndBuildRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.AuthorizeAndBuildResponse.SerializeToString,
            ),
            'BroadcastTransaction': grpc.unary_stream_rpc_method_handler(
                    servicer.BroadcastTransaction,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.BroadcastTransactionRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.BroadcastTransactionResponse.SerializeToString,
            ),
            'DelegationsByAddressIndex': grpc.unary_stream_rpc_method_handler(
                    servicer.DelegationsByAddressIndex,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.DelegationsByAddressIndexRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.DelegationsByAddressIndexResponse.SerializeToString,
            ),
            'UnbondingTokensByAddressIndex': grpc.unary_stream_rpc_method_handler(
                    servicer.UnbondingTokensByAddressIndex,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.UnbondingTokensByAddressIndexRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.UnbondingTokensByAddressIndexResponse.SerializeToString,
            ),
            'Auctions': grpc.unary_stream_rpc_method_handler(
                    servicer.Auctions,
                    request_deserializer=penumbra_dot_view_dot_v1_dot_view__pb2.AuctionsRequest.FromString,
                    response_serializer=penumbra_dot_view_dot_v1_dot_view__pb2.AuctionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'penumbra.view.v1.ViewService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ViewService(object):
    """The view RPC is used by a view client, who wants to do some
    transaction-related actions, to request data from a view service, which is
    responsible for synchronizing and scanning the public chain state with one or
    more full viewing keys.
    """

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/Status',
            penumbra_dot_view_dot_v1_dot_view__pb2.StatusRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StatusStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/StatusStream',
            penumbra_dot_view_dot_v1_dot_view__pb2.StatusStreamRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.StatusStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Notes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/Notes',
            penumbra_dot_view_dot_v1_dot_view__pb2.NotesRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.NotesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotesForVoting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/NotesForVoting',
            penumbra_dot_view_dot_v1_dot_view__pb2.NotesForVotingRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.NotesForVotingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Assets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/Assets',
            penumbra_dot_view_dot_v1_dot_view__pb2.AssetsRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.AssetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AssetMetadataById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/AssetMetadataById',
            penumbra_dot_view_dot_v1_dot_view__pb2.AssetMetadataByIdRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.AssetMetadataByIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppParameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/AppParameters',
            penumbra_dot_view_dot_v1_dot_view__pb2.AppParametersRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.AppParametersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GasPrices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/GasPrices',
            penumbra_dot_view_dot_v1_dot_view__pb2.GasPricesRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.GasPricesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FMDParameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/FMDParameters',
            penumbra_dot_view_dot_v1_dot_view__pb2.FMDParametersRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.FMDParametersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddressByIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/AddressByIndex',
            penumbra_dot_view_dot_v1_dot_view__pb2.AddressByIndexRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.AddressByIndexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WalletId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/WalletId',
            penumbra_dot_view_dot_v1_dot_view__pb2.WalletIdRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.WalletIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IndexByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/IndexByAddress',
            penumbra_dot_view_dot_v1_dot_view__pb2.IndexByAddressRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.IndexByAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EphemeralAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/EphemeralAddress',
            penumbra_dot_view_dot_v1_dot_view__pb2.EphemeralAddressRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.EphemeralAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Balances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/Balances',
            penumbra_dot_view_dot_v1_dot_view__pb2.BalancesRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.BalancesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NoteByCommitment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/NoteByCommitment',
            penumbra_dot_view_dot_v1_dot_view__pb2.NoteByCommitmentRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.NoteByCommitmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SwapByCommitment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/SwapByCommitment',
            penumbra_dot_view_dot_v1_dot_view__pb2.SwapByCommitmentRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.SwapByCommitmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnclaimedSwaps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/UnclaimedSwaps',
            penumbra_dot_view_dot_v1_dot_view__pb2.UnclaimedSwapsRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.UnclaimedSwapsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NullifierStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/NullifierStatus',
            penumbra_dot_view_dot_v1_dot_view__pb2.NullifierStatusRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.NullifierStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransactionInfoByHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/TransactionInfoByHash',
            penumbra_dot_view_dot_v1_dot_view__pb2.TransactionInfoByHashRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.TransactionInfoByHashResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransactionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/TransactionInfo',
            penumbra_dot_view_dot_v1_dot_view__pb2.TransactionInfoRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.TransactionInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OwnedPositionIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/OwnedPositionIds',
            penumbra_dot_view_dot_v1_dot_view__pb2.OwnedPositionIdsRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.OwnedPositionIdsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransactionPlanner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/TransactionPlanner',
            penumbra_dot_view_dot_v1_dot_view__pb2.TransactionPlannerRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.TransactionPlannerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Witness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.view.v1.ViewService/Witness',
            penumbra_dot_view_dot_v1_dot_view__pb2.WitnessRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.WitnessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WitnessAndBuild(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/WitnessAndBuild',
            penumbra_dot_view_dot_v1_dot_view__pb2.WitnessAndBuildRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.WitnessAndBuildResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthorizeAndBuild(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/AuthorizeAndBuild',
            penumbra_dot_view_dot_v1_dot_view__pb2.AuthorizeAndBuildRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.AuthorizeAndBuildResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BroadcastTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/BroadcastTransaction',
            penumbra_dot_view_dot_v1_dot_view__pb2.BroadcastTransactionRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.BroadcastTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelegationsByAddressIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/DelegationsByAddressIndex',
            penumbra_dot_view_dot_v1_dot_view__pb2.DelegationsByAddressIndexRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.DelegationsByAddressIndexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnbondingTokensByAddressIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/UnbondingTokensByAddressIndex',
            penumbra_dot_view_dot_v1_dot_view__pb2.UnbondingTokensByAddressIndexRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.UnbondingTokensByAddressIndexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Auctions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.view.v1.ViewService/Auctions',
            penumbra_dot_view_dot_v1_dot_view__pb2.AuctionsRequest.SerializeToString,
            penumbra_dot_view_dot_v1_dot_view__pb2.AuctionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
