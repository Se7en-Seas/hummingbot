# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import grpc.experimental

from hummingbot.connector.gateway.clob_spot.data_sources.penumbra.generated.penumbra.core.component.compact_block.v1 import (
    compact_block_pb2 as penumbra_dot_core_dot_component_dot_compact__block_dot_v1_dot_compact__block__pb2,
)


class QueryServiceStub(object):
    """Query operations for the compact block component.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CompactBlockRange = channel.unary_stream(
                '/penumbra.core.component.compact_block.v1.QueryService/CompactBlockRange',
                request_serializer=penumbra_dot_core_dot_component_dot_compact__block_dot_v1_dot_compact__block__pb2.CompactBlockRangeRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_compact__block_dot_v1_dot_compact__block__pb2.CompactBlockRangeResponse.FromString,
                )
        self.CompactBlock = channel.unary_unary(
                '/penumbra.core.component.compact_block.v1.QueryService/CompactBlock',
                request_serializer=penumbra_dot_core_dot_component_dot_compact__block_dot_v1_dot_compact__block__pb2.CompactBlockRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_compact__block_dot_v1_dot_compact__block__pb2.CompactBlockResponse.FromString,
                )


class QueryServiceServicer(object):
    """Query operations for the compact block component.
    """

    def CompactBlockRange(self, request, context):
        """Returns a stream of compact blocks, optionally keeping the stream alive for push notifications.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompactBlock(self, request, context):
        """Returns a single compact block at a specific height.

        Clients requesting multiple compact blocks should generally use the streaming RPC.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CompactBlockRange': grpc.unary_stream_rpc_method_handler(
                    servicer.CompactBlockRange,
                    request_deserializer=penumbra_dot_core_dot_component_dot_compact__block_dot_v1_dot_compact__block__pb2.CompactBlockRangeRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_compact__block_dot_v1_dot_compact__block__pb2.CompactBlockRangeResponse.SerializeToString,
            ),
            'CompactBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.CompactBlock,
                    request_deserializer=penumbra_dot_core_dot_component_dot_compact__block_dot_v1_dot_compact__block__pb2.CompactBlockRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_compact__block_dot_v1_dot_compact__block__pb2.CompactBlockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'penumbra.core.component.compact_block.v1.QueryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QueryService(object):
    """Query operations for the compact block component.
    """

    @staticmethod
    def CompactBlockRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.core.component.compact_block.v1.QueryService/CompactBlockRange',
            penumbra_dot_core_dot_component_dot_compact__block_dot_v1_dot_compact__block__pb2.CompactBlockRangeRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_compact__block_dot_v1_dot_compact__block__pb2.CompactBlockRangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompactBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.core.component.compact_block.v1.QueryService/CompactBlock',
            penumbra_dot_core_dot_component_dot_compact__block_dot_v1_dot_compact__block__pb2.CompactBlockRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_compact__block_dot_v1_dot_compact__block__pb2.CompactBlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
