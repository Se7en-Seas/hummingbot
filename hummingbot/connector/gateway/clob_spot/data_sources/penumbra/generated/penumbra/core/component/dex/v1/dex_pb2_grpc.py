# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import grpc.experimental

from hummingbot.connector.gateway.clob_spot.data_sources.penumbra.generated.penumbra.core.component.dex.v1 import (
    dex_pb2 as penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2,
)


class QueryServiceStub(object):
    """Query operations for the DEX component.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BatchSwapOutputData = channel.unary_unary(
                '/penumbra.core.component.dex.v1.QueryService/BatchSwapOutputData',
                request_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.BatchSwapOutputDataRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.BatchSwapOutputDataResponse.FromString,
                )
        self.SwapExecution = channel.unary_unary(
                '/penumbra.core.component.dex.v1.QueryService/SwapExecution',
                request_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SwapExecutionRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SwapExecutionResponse.FromString,
                )
        self.ArbExecution = channel.unary_unary(
                '/penumbra.core.component.dex.v1.QueryService/ArbExecution',
                request_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.ArbExecutionRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.ArbExecutionResponse.FromString,
                )
        self.SwapExecutions = channel.unary_stream(
                '/penumbra.core.component.dex.v1.QueryService/SwapExecutions',
                request_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SwapExecutionsRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SwapExecutionsResponse.FromString,
                )
        self.ArbExecutions = channel.unary_stream(
                '/penumbra.core.component.dex.v1.QueryService/ArbExecutions',
                request_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.ArbExecutionsRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.ArbExecutionsResponse.FromString,
                )
        self.LiquidityPositions = channel.unary_stream(
                '/penumbra.core.component.dex.v1.QueryService/LiquidityPositions',
                request_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsResponse.FromString,
                )
        self.LiquidityPositionById = channel.unary_unary(
                '/penumbra.core.component.dex.v1.QueryService/LiquidityPositionById',
                request_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionByIdRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionByIdResponse.FromString,
                )
        self.LiquidityPositionsById = channel.unary_stream(
                '/penumbra.core.component.dex.v1.QueryService/LiquidityPositionsById',
                request_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsByIdRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsByIdResponse.FromString,
                )
        self.LiquidityPositionsByPrice = channel.unary_stream(
                '/penumbra.core.component.dex.v1.QueryService/LiquidityPositionsByPrice',
                request_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsByPriceRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsByPriceResponse.FromString,
                )
        self.Spread = channel.unary_unary(
                '/penumbra.core.component.dex.v1.QueryService/Spread',
                request_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SpreadRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SpreadResponse.FromString,
                )


class QueryServiceServicer(object):
    """Query operations for the DEX component.
    """

    def BatchSwapOutputData(self, request, context):
        """Get the batch clearing prices for a specific block height and trading pair.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SwapExecution(self, request, context):
        """Get the precise swap execution used for a specific batch swap.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ArbExecution(self, request, context):
        """Get the precise execution used to perform on-chain arbitrage.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SwapExecutions(self, request, context):
        """Stream all swap executions over a range of heights, optionally subscribing to future executions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ArbExecutions(self, request, context):
        """Stream all arbitrage executions over a range of heights, optionally subscribing to future executions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LiquidityPositions(self, request, context):
        """Query all liquidity positions on the DEX.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LiquidityPositionById(self, request, context):
        """Query liquidity positions by ID.

        To get multiple positions, use `LiquidityPositionsById`.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LiquidityPositionsById(self, request, context):
        """Query multiple liquidity positions by ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LiquidityPositionsByPrice(self, request, context):
        """Query liquidity positions on a specific pair, sorted by effective price.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Spread(self, request, context):
        """Get the current (direct) spread on a trading pair.

        This method doesn't do simulation, so actually executing might result in a
        better price (if the chain takes a different route to the target asset).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BatchSwapOutputData': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchSwapOutputData,
                    request_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.BatchSwapOutputDataRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.BatchSwapOutputDataResponse.SerializeToString,
            ),
            'SwapExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.SwapExecution,
                    request_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SwapExecutionRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SwapExecutionResponse.SerializeToString,
            ),
            'ArbExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.ArbExecution,
                    request_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.ArbExecutionRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.ArbExecutionResponse.SerializeToString,
            ),
            'SwapExecutions': grpc.unary_stream_rpc_method_handler(
                    servicer.SwapExecutions,
                    request_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SwapExecutionsRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SwapExecutionsResponse.SerializeToString,
            ),
            'ArbExecutions': grpc.unary_stream_rpc_method_handler(
                    servicer.ArbExecutions,
                    request_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.ArbExecutionsRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.ArbExecutionsResponse.SerializeToString,
            ),
            'LiquidityPositions': grpc.unary_stream_rpc_method_handler(
                    servicer.LiquidityPositions,
                    request_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsResponse.SerializeToString,
            ),
            'LiquidityPositionById': grpc.unary_unary_rpc_method_handler(
                    servicer.LiquidityPositionById,
                    request_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionByIdRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionByIdResponse.SerializeToString,
            ),
            'LiquidityPositionsById': grpc.unary_stream_rpc_method_handler(
                    servicer.LiquidityPositionsById,
                    request_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsByIdRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsByIdResponse.SerializeToString,
            ),
            'LiquidityPositionsByPrice': grpc.unary_stream_rpc_method_handler(
                    servicer.LiquidityPositionsByPrice,
                    request_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsByPriceRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsByPriceResponse.SerializeToString,
            ),
            'Spread': grpc.unary_unary_rpc_method_handler(
                    servicer.Spread,
                    request_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SpreadRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SpreadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'penumbra.core.component.dex.v1.QueryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QueryService(object):
    """Query operations for the DEX component.
    """

    @staticmethod
    def BatchSwapOutputData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.core.component.dex.v1.QueryService/BatchSwapOutputData',
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.BatchSwapOutputDataRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.BatchSwapOutputDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SwapExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.core.component.dex.v1.QueryService/SwapExecution',
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SwapExecutionRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SwapExecutionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ArbExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.core.component.dex.v1.QueryService/ArbExecution',
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.ArbExecutionRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.ArbExecutionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SwapExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.core.component.dex.v1.QueryService/SwapExecutions',
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SwapExecutionsRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SwapExecutionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ArbExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.core.component.dex.v1.QueryService/ArbExecutions',
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.ArbExecutionsRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.ArbExecutionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LiquidityPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.core.component.dex.v1.QueryService/LiquidityPositions',
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LiquidityPositionById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.core.component.dex.v1.QueryService/LiquidityPositionById',
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionByIdRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionByIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LiquidityPositionsById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.core.component.dex.v1.QueryService/LiquidityPositionsById',
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsByIdRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsByIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LiquidityPositionsByPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/penumbra.core.component.dex.v1.QueryService/LiquidityPositionsByPrice',
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsByPriceRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.LiquidityPositionsByPriceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Spread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.core.component.dex.v1.QueryService/Spread',
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SpreadRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SpreadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SimulationServiceStub(object):
    """Simulation for the DEX component.

    This is a separate service from the QueryService because it's not just a
    simple read query from the state. Thus it poses greater DoS risks, and node
    operators may want to enable it separately.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SimulateTrade = channel.unary_unary(
                '/penumbra.core.component.dex.v1.SimulationService/SimulateTrade',
                request_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SimulateTradeRequest.SerializeToString,
                response_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SimulateTradeResponse.FromString,
                )


class SimulationServiceServicer(object):
    """Simulation for the DEX component.

    This is a separate service from the QueryService because it's not just a
    simple read query from the state. Thus it poses greater DoS risks, and node
    operators may want to enable it separately.
    """

    def SimulateTrade(self, request, context):
        """Simulate routing and trade execution.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimulationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SimulateTrade': grpc.unary_unary_rpc_method_handler(
                    servicer.SimulateTrade,
                    request_deserializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SimulateTradeRequest.FromString,
                    response_serializer=penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SimulateTradeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'penumbra.core.component.dex.v1.SimulationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SimulationService(object):
    """Simulation for the DEX component.

    This is a separate service from the QueryService because it's not just a
    simple read query from the state. Thus it poses greater DoS risks, and node
    operators may want to enable it separately.
    """

    @staticmethod
    def SimulateTrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/penumbra.core.component.dex.v1.SimulationService/SimulateTrade',
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SimulateTradeRequest.SerializeToString,
            penumbra_dot_core_dot_component_dot_dex_dot_v1_dot_dex__pb2.SimulateTradeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
