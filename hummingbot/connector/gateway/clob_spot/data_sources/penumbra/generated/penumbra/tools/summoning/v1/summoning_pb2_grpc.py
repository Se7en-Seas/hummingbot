# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from penumbra.tools.summoning.v1 import summoning_pb2 as penumbra_dot_tools_dot_summoning_dot_v1_dot_summoning__pb2


class CeremonyCoordinatorServiceStub(object):
    """Runs a Phase 2 MPC ceremony with dynamic slot allocation.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Participate = channel.stream_stream(
                '/penumbra.tools.summoning.v1.CeremonyCoordinatorService/Participate',
                request_serializer=penumbra_dot_tools_dot_summoning_dot_v1_dot_summoning__pb2.ParticipateRequest.SerializeToString,
                response_deserializer=penumbra_dot_tools_dot_summoning_dot_v1_dot_summoning__pb2.ParticipateResponse.FromString,
                )


class CeremonyCoordinatorServiceServicer(object):
    """Runs a Phase 2 MPC ceremony with dynamic slot allocation.
    """

    def Participate(self, request_iterator, context):
        """The protocol used to participate in the ceremony.

        The message flow is
        ```
        Client                     Server
        Identify     ===========>
        <=========== Position (repeated)
        <=========== ContributeNow
        Contribution ===========>
        <=========== Confirm
        ```
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CeremonyCoordinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Participate': grpc.stream_stream_rpc_method_handler(
                    servicer.Participate,
                    request_deserializer=penumbra_dot_tools_dot_summoning_dot_v1_dot_summoning__pb2.ParticipateRequest.FromString,
                    response_serializer=penumbra_dot_tools_dot_summoning_dot_v1_dot_summoning__pb2.ParticipateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'penumbra.tools.summoning.v1.CeremonyCoordinatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CeremonyCoordinatorService(object):
    """Runs a Phase 2 MPC ceremony with dynamic slot allocation.
    """

    @staticmethod
    def Participate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/penumbra.tools.summoning.v1.CeremonyCoordinatorService/Participate',
            penumbra_dot_tools_dot_summoning_dot_v1_dot_summoning__pb2.ParticipateRequest.SerializeToString,
            penumbra_dot_tools_dot_summoning_dot_v1_dot_summoning__pb2.ParticipateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
